{
	// Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// },
	
	"创建AnimatedBuilder": {
		"prefix": "bab",
		"body": [
			"AnimatedBuilder(",
			"  animation: $1,",
			"  child: $1,",
			"  builder: (BuildContext context, Widget child) {",
			"    return Container();",
			"  },",
			"),",
		],
		"description": "创建AnimatedBuilder"
	},
	"创建Build()方法": {
		"prefix": "bu",
		"body": [
			"@override",
			"Widget build(BuildContext context) {",
			"  return $1;",
			"}",
		],
		"description": "创建Build()方法"
	},
	"创建FutureBuilder": {
		"prefix": "bufb",
		"body": [
			"FutureBuilder(",
			"  future: $1,",
			"  initialData: $1,",
			"  builder: (BuildContext context, AsyncSnapshot snapshot) {",
			"    return $1;",
			"  },",
			");",
		],
		"description": "创建FutureBuilder"
	},
	"创建LayoutBuilder": {
		"prefix": "bulb",
		"body": [
			"LayoutBuilder(",
			"  builder: (BuildContext context, BoxConstraints constraints) {",
			"    return $1;",
			"  },",
			");",
		],
		"description": "创建LayoutBuilder"
	},
	"创建OrientationBuilder": {
		"prefix": "buob",
		"body": [
			"OrientationBuilder(",
			"  builder: (BuildContext context, Orientation orientation) {",
			"    return Container();",
			"  },",
			");",
		],
		"description": "创建OrientationBuilder"
	},
	"创建StatefulBuilder": {
		"prefix": "bustf",
		"body": [
			"StatefulBuilder(",
			"  builder: (BuildContext context, setState) {",
			"    return $1;",
			"  },",
			");",
		],
		"description": "创建StatefulBuilder"
	},
	"创建StreamBuilder": {
		"prefix": "bustr",
		"body": [
			"StreamBuilder(",
			"  stream: $1,",
			"  initialData: $2,",
			"  builder: (BuildContext context, AsyncSnapshot snapshot) {",
			"    return $3;",
			"  },",
			");",
		],
		"description": "创建StreamBuilder"
	},
	"自定义CustomClipper": {
		"prefix": "cc",
		"body": [
			"class $1 extends CustomClipper<Path> {",
			"    @override",
			"    Path getClip(Size size) {",
			"      //TODO:",
			"    }",
			"",
			"    @override",
			"    bool shouldReclip(CustomClipper<Path> oldClipper) => false;",
			"}",
		],
		"description": "自定义CustomClipper"
	},
	"创建Center": {
		"prefix": "cen",
		"body": [
			"Center(",
			"    child: $1," , 
			"),",
		],
		"description": "创建Center"
	},
	"创建Column": {
		"prefix": "col",
		"body": [
			"Column(",
			"    chilchildren: [$1]," , 
			"),",
		],
		"description": "创建Column"
	},
	"创建完整的Container": {
		"prefix": "con",
		"body": [
			"Container(",
			"  //宽度",
			"  width: $1,",
			"  //高度",
			"  height: $2,",
			"  // 盒子样式",
			"  decoration: BoxDecoration(",
			"    color: Colors.$3,",
			"    //设置Border属性给容器添加边框",
			"    border: Border.all(",
			"      //为边框添加颜色",
			"      color: Colors.$3,",
			"      width: $4, //边框宽度",
			"    ),",
			"  ),",
			"  child: $5,",
			");",
		],
		"description": "创建完整的Container"
	},
	"自定义CustomPainter": {
		"prefix": "cp",
		"body": [
			"class $1Painter extends CustomPainter {",
			"  @override",
			"  void paint(Canvas canvas, Size size) {",
			"    //TODO",
			"  }",
			"",
			"  @override",
			"  bool shouldRepaint($name$Painter oldDelegate) => false;",
			"",
			"  @override",
			"  bool shouldRebuildSemantics($1Painter oldDelegate) => false;",
			"}",
		],
		"description": "自定义CustomPainter"
	},
	"CustomScrollView + SliverPadding创建列表，子控件带有边距": {
		"prefix": "csv",
		"body": [
			"CustomScrollView(",
			"  shrinkWrap: true,",
			"  slivers: <Widget>[",
			"    SliverPadding(",
			"      padding: const EdgeInsets.all($1),",
			"      sliver: SliverList(",
			"        delegate: SliverChildListDelegate(",
			"          <Widget>[",
			"            //TODO:请填写子控件",
			"          ],",
			"        ),",
			"      ),",
			"    ),",
			"  ],",
			");",
		],
		"description": "CustomScrollView + SliverPadding创建列表，子控件带有边距"
	},
	"使用CustomScrollView + SliverGrid创建列表": {
		"prefix": "csv2",
		"body": [
			"CustomScrollView(",
			"  shrinkWrap: true,",
			"  slivers: <Widget>[",
			"    SliverGrid(",
			"      // 设置grid的宽高、间距属性",
			"      gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(",
			"        // 可以理解为：每一个item的宽（或高）的最大值",
			"        maxCrossAxisExtent: $maxCrossAxisExtent$,",
			"        // 行之间的间距",
			"        mainAxisSpacing: $1,",
			"        // 列之间的间距",
			"        crossAxisSpacing: $2,",
			"        // 子孩子的宽高比例，即：宽度/高度的值",
			"        childAspectRatio: $3,",
			"      ),",
			"      // 设置每一个item的布局",
			"      delegate: SliverChildBuilderDelegate(",
			"        (BuildContext context, int index) {",
			"          return $4;",
			"        },",
			"        childCount: $5,",
			"      ),",
			"    )",
			"  ],",
			");",
		],
		"description": "使用CustomScrollView + SliverGrid创建列表"
	},
	"创建GridView.count": {
		"prefix": "gv",
		"body": [
			"GridView.count(",
			"  // 创建几列",
			"  crossAxisCount: $1,",
			"  // Axis.horizontal表示横向滑动，scrollDirection: Axis.vertical表示纵向滑动",
			"  scrollDirection: Axis.vertical,",
			"  // 列之间的间距",
			"  crossAxisSpacing: $2,",
			"  // 行之间的间距",
			"  mainAxisSpacing: $3,",
			"  // 默认false 是否根据子孩子的宽高自动包裹item自身",
			"  shrinkWrap: false,",
			"  // true表示数据倒序排列 false表示顺序排列",
			"  reverse: false,",
			"  // 子孩子的比例",
			"  childAspectRatio: $4,",
			"  // 设置子孩子item,这里传入子孩子控件",
			"  children: $5,",
			");",
		],
		"description": "创建GridView.count"
	},
	"创建 Inherited": {
		"prefix": "inh",
		"body": [
			"class $1 extends InheritedWidget {",
			"  $1({Key key, this.child}) : super(key: key, child: child);",
			"",
			" final Widget child;",
			"",
			"  static $1 of(BuildContext context) {",
			"    return (context.inheritFromWidgetOfExactType($1)as $1);",
			"  }",
			"",
			"  @override",
			"  bool updateShouldNotify( $1 oldWidget) {",
			"    return true;",
			"  }",
			"}",
		],
		"description": "创建 Inherited"
	},
	"创建基本的ListView": {
		"prefix": "lv",
		"body": [
			"ListView(",
			"  children: <Widget>[",
			"    //TODO:这里写子控件。",
			"  ],",
			");",
		],
		"description": "创建基本的ListView"
	},
	"创建ListView.builder": {
		"prefix": "lvb",
		"body": [
			"ListView.builder(",
			"   padding: EdgeInsets.all($value$),",
			"   itemCount: $itemCount$,",
			"   itemBuilder: (BuildContext context, int index) {",
			"     return $widget$;",
			"   },",
			");",
		],
		"description": "创建ListView.builder"
	},
	"创建带分割线的ListView": {
		"prefix": "lvd",
		"body": [
			"ListView(",
			"   shrinkWrap: true,",
			"   // 排列方向，Axis.horizontal表示水平，Axis.vertical表示垂直",
			"   scrollDirection: Axis.vertical,",
			"   padding: const EdgeInsets.all(20.0),",
			"   children: <Widget>[",
			"     $1,",
			"     Divider(height: 1.0, color: Colors.grey),",
			"     $1,",
			"     Divider(height: 1.0, color: Colors.grey),",
			"     // todo: 建议控件多的话可以做一个封装",
			"   ],",
			");",
		],
		"description": "创建带分割线的ListView"
	},
	"创建RadioListTile，可以单选的item": {
		"prefix": "lvr",
		"body": [
			"  //TODO:以下代码要写在State类里面",
			"  Widget items() {",
			"    return Column(",
			"      // In the build function of that State",
			"      children: <Widget>[",
			"        RadioListTile<SingingCharacter>(",
			"          title: const Text('$1'),",
			"          value: SingingCharacter.title1,",
			"          groupValue: _character,",
			"          onChanged: (SingingCharacter value) {",
			"            setState(() {",
			"              _character = value;",
			"            });",
			"          },",
			"        ),",
			"        RadioListTile<SingingCharacter>(",
			"          title: const Text('$2'),",
			"          value: SingingCharacter.title2,",
			"          groupValue: _character,",
			"          onChanged: (SingingCharacter value) {",
			"            setState(() {",
			"              _character = value;",
			"            });",
			"          },",
			"        ),",
			"      ],",
			"    );",
			"  }",
			"",
			"  // In the State of a stateful widget:",
			"  SingingCharacter _character = SingingCharacter.title1;",
			"",
			"// TODO: 这个类写在State类外面",
			"enum SingingCharacter { title1, title2 }",
		],
		"description": "创建RadioListTile，可以单选的item"
	},
	"创建带有各种ListTile的ListView": {
		"prefix": "lvt",
		"body": [
			"ListView(",
			"  children: <Widget>[",
			"    // 一个有图片和文字组成的简单列表item",
			"    ListTile(",
			"      leading: Icon(Icons.$1),",
			"      title: Text('$title$'),",
			"      subtitle: Text('$2'),",
			"      // 右边的图标",
			"      trailing: Icon(Icons.$1),",
			"      onTap: () {",
			"        //TODO:这里处理点击事件",
			"      },",
			"      onLongPress: () {",
			"        //TODO:这里处理长按事件",
			"      },",
			"      selected: true,",
			"    ),",
			"    // 单选框列表item",
			"    CheckboxListTile(",
			"      value: true,",
			"      onChanged: ((bool) {",
			"        //TODO:焦点改变的监听事件写在这里：",
			"      }),",
			"      title: Text('$3'),",
			"      subtitle: Text('$4'),",
			"     selected: true,",
			"    activeColor: Colors.teal,",
			"    ),",
			"    // 开关列表item",
			"    SwitchListTile(",
			"      value: true,",
			"      onChanged: ((bool) {",
			"       //TODO:焦点改变的监听事件写在这里：",
			"      }),",
			"      title: Text('$5'),",
			"      subtitle: Text('$5'),",
			"      //如果subtitle文字过长，将会以三行显示",
			"      isThreeLine: true,",
			"      selected: true,",
			"      activeColor: Colors.teal,",
			"      //SwitchListTile左边的图标",
			"      secondary: Icon(Icons.account_circle),",
			"    ),",
			"    AboutListTile(",
			"      icon: Icon(Icons.$6),",
			"      //公司logo",
			"      applicationIcon: Image.asset('$7'),",
			"      //app名称",
			"      applicationName: '关于我们',",
			"      //app版本号",
			"      applicationVersion: 'V1.0.0',",
			"      //版权信息",
			"      applicationLegalese: '版权归XX科技有限公司所有...',",
			"    ),",
			"  ],",
			");",
		],
		"description": "创建带有各种ListTile的ListView"
	},
	"创建 StatefulWidget 控件": {
		"prefix": "mainstf",
		"body": [
			"import 'package:flutter/material.dart';",
			"",
			"void main(){",
			"runApp(MaterialApp(",
			"  title:'$1',",
			"  theme: ThemeData(",
			"    primarySwatch: Colors.blue,",
			"),",
			"home: $2(),",
			"));",
			"}",
			"",
			"class $2 extends StatefulWidget{",
			  "@override",
			  "_$2State createState() => _$2State();",
			"}",
			"",
			"class _$2State extends State<$2>{",
			  "@override",
			  "Widget build(BuildContext context){",
			    "return Scaffold(",
			      "appBar: AppBar(",
			        "title: Text('$1'),",
			      "),",
			    ");",
			  "}",
			"}",
		],
		"description": "创建 StatefulWidget 控件"
	},
	"创建 StatelessWidget 控件": {
		"prefix": "mainstl",
		"body": [
			"import 'package:flutter/material.dart';",
			"",
			"void main(){",
			"runApp(MaterialApp(",
			"  title:'$1',",
			"  theme: ThemeData(",
			"    primarySwatch: Colors.blue,",
			"),",
			"home: $2(),",
			"));",
			"}",
			"",
			"class $2 extends StatelessWidget{",
			  "@override",
			  "Widget build(BuildContext context){",
			    "return Scaffold(",
			      "appBar: AppBar(",
			        "title: Text('$1'),",
			      "),",
			    ");",
			  "}",
			"}",
		],
		"description": "创建 StatelessWidget 控件"
	},
	"创建方法": {
		"prefix": "me",
		"body": [
			"void $1(){",
			"  //TODO",
			"}",
		],
		"description": "创建方法"
	},
	"创建私有方法": {
		"prefix": "mep",
		"body": [
			"void _$1(){",
			"  //TODO",
			"}",
		],
		"description": "创建私有方法"
	},
	"创建Row": {
		"prefix": "row",
		"body": [
			"Row(",
			"  children: [],",
			"),",
		],
		"description": "创建Row"
	},
	"创建SizedBox": {
		"prefix": "sb",
		"body": [
			"SizedBox(",
			"  width: $1,", 
			"  height: $2, ",
			"  child: $3,",
			");",
		],
		"description": "创建SizedBox"
	},
	"创建SingleChildScrollView": {
		"prefix": "ssv",
		"body": [
			"SingleChildScrollView(",
			"  scrollDirection: Axis.vertical,",
			"  padding: EdgeInsets.all($1),",
			"  controller: $2,",
			"  child: $3,",
			");",
		],
		"description": "创建SingleChildScrollView"
	},
	"创建Stateful（带有 AnimationController）": {
		"prefix": "stanim",
		"body": [
			"class $1 extends StatefulWidget {",
			"  @override",
			"  _$1State createState() => _$1State();",
			"}",
			"",
			"class _$1State extends State<$1> with SingleTickerProviderStateMixin {",
			"  AnimationController _controller;",
			"",
			"  @override",
			"  void initState() {",
			"    _controller = AnimationController(vsync: this);",
			"    super.initState();",
			"  }",
			"",
			"  @override",
			"  void dispose() {",
			"    _controller.dispose();",
			"    super.dispose();",
			"  }",
			"  ",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return Container($2);",
			"  }",
			"}",
		],
		"description": "创建Stateful（带有 AnimationController）"
	},
	"创建完整的StatefulWidget，包含生命周期相关方法。": {
		"prefix": "stf",
		"body": [
			"class $1 extends StatefulWidget {",
			"  @override",
			"  $1State createState() => $1State();",
			"}",
			"",
			"class $1State extends State<$1> {",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return Scaffold(",
			"      appBar: AppBar(",
			"        title: Text('$2'),",
			"      ),",
			"    );",
			"  }",
			"  @override",
			"  void initState() {",
			"    // TODO: implement initState",
			"    super.initState();",
			"  }",
			"  ",
			"  @override",
			"  void dispose() {",
			"    // TODO: implement dispose",
			"    super.dispose();",
			"  }",
			"  ",
			"  @override",
			"  void didUpdateWidget($1 oldWidget) {",
			"    // TODO: implement didUpdateWidget",
			"    super.didUpdateWidget(oldWidget);",
			"  }",
			"  ",
			"  @override",
			"  void didChangeDependencies() {",
			"    // TODO: implement didChangeDependencies",
			"    super.didChangeDependencies();",
			"  }",
			"}",
		],
		"description": "创建完整的StatefulWidget，包含生命周期相关方法。"
	},
	"创建StatelessWidget": {
		"prefix": "stl",
		"body": [
			"class $1 extends StatelessWidget {",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return Scaffold(",
			"      appBar: AppBar(",
			"        title: Text('$2'),",
			"      ),",
			"    );",
			"  }",
			"}",
		],
		"description": "创建StatelessWidget"
	},

	"创建CustomScrollView": {
		"prefix": "svc",
		"body": [
			"CustomScrollView(",
			"  slivers: <Widget>[",
			"    //TODO",
			"  ],",
			"),",
		],
		"description": "创建CustomScrollView"
	},

	"创建一个标准的Text": {
		"prefix": "te",
		"body": [
			"Text('$1',",
			"  style: TextStyle(",
			"    color: Colors.$2, ",
			"    fontWeight: FontWeight.$3, ",
			"    fontSize: $4,",
			"  ),",
			"  textAlign: TextAlign.$5,",
			"  textDirection: TextDirection.$6,",
			"  textScaleFactor: $7,",
			"  overflow: TextOverflow.$8,",
			"  locale: Localizations.localeOf(context),",
			"  maxLines: $9,",
			");",
		],
		"description": "创建一个标准的Text"
	},

}